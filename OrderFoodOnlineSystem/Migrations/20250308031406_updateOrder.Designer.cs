// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderFoodOnlineSystem.Data;

#nullable disable

namespace OrderFoodOnlineSystem.Migrations
{
    [DbContext(typeof(OrderFoodDbContext))]
    [Migration("20250308031406_updateOrder")]
    partial class updateOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8b06abb5-8df6-4b7f-8eb4-91344791938e",
                            ConcurrencyStamp = "8b06abb5-8df6-4b7f-8eb4-91344791938e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7169d432-6275-48ce-b121-879b37df1762",
                            ConcurrencyStamp = "7169d432-6275-48ce-b121-879b37df1762",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "d6285ef2-cf06-475c-914f-119737485d65",
                            ConcurrencyStamp = "d6285ef2-cf06-475c-914f-119737485d65",
                            Name = "RestaurantManager",
                            NormalizedName = "RESTAURANTMANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "80d9c265-64a3-4520-9b0f-164d5bfc6afa",
                            RoleId = "8b06abb5-8df6-4b7f-8eb4-91344791938e"
                        },
                        new
                        {
                            UserId = "cfcc4d4f-598d-48d7-985c-973ade5c4a85",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        },
                        new
                        {
                            UserId = "823d613d-51f5-44d0-af8c-98a5dcf1e070",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        },
                        new
                        {
                            UserId = "f7fe0044-a370-4d9f-ba89-e3c5e07dd17f",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        },
                        new
                        {
                            UserId = "249116a4-54c9-4928-8de1-8c1c1b921695",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        },
                        new
                        {
                            UserId = "007e8fc5-4751-4514-8d48-842fe1478097",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        },
                        new
                        {
                            UserId = "19116f65-9e11-4b13-81b0-0b5a2f224fda",
                            RoleId = "d6285ef2-cf06-475c-914f-119737485d65"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80d9c265-64a3-4520-9b0f-164d5bfc6afa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f4f840-6448-4fbb-ab15-9ac7eb688f7c",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN1@GMAIL.COM",
                            NormalizedUserName = "ADMIN1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGs3LRYykr9WajXOK4Y11VLGHF14VzdhhAnyRd0aAgKTpCoR5r2nZlzuRr/6p2FDLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52a4b8bd-9804-45d3-9125-32df5869fab8",
                            TwoFactorEnabled = false,
                            UserName = "admin1@gmail.com"
                        },
                        new
                        {
                            Id = "cfcc4d4f-598d-48d7-985c-973ade5c4a85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8d751d6-f58f-4a15-b713-c3cd581cb551",
                            Email = "tbmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "TBMANAGER@GMAIL.COM",
                            NormalizedUserName = "TBMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKIH5mf5ukdcyNhy9cGyI3rO6aflvTikWXkyEzQ1xTUOmb8Y1Dc2W1i8XEHkvac9Sg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1efa798-3d21-492a-bd10-56f58e015edd",
                            TwoFactorEnabled = false,
                            UserName = "tbmanager@gmail.com"
                        },
                        new
                        {
                            Id = "823d613d-51f5-44d0-af8c-98a5dcf1e070",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8236404b-5356-422e-afd6-b54776a3e3dc",
                            Email = "BKmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "bkMANAGER@GMAIL.COM",
                            NormalizedUserName = "BKMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEzzzh6xvgWC74o9rwDkUUJfdbz/AEw6lHJtUWqjVUf1lAt2PCqqPjSfOZZeKFevMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ab93e8b-f2d8-459c-aa16-6d30c2cb47fd",
                            TwoFactorEnabled = false,
                            UserName = "bkmanager@gmail.com"
                        },
                        new
                        {
                            Id = "f7fe0044-a370-4d9f-ba89-e3c5e07dd17f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd8753f1-4f94-4be3-b63a-17bc2d7635a3",
                            Email = "gmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "GMANAGER@GMAIL.COM",
                            NormalizedUserName = "GMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOoXQKojc6ZSiZyZtbTZz5JsnvW4dKBW5KUfkTb08aAAcysSB2T/KfwZiFoUEeIISQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8bed259-7a1b-4cfa-8368-dca899b2029a",
                            TwoFactorEnabled = false,
                            UserName = "gmanager@gmail.com"
                        },
                        new
                        {
                            Id = "249116a4-54c9-4928-8de1-8c1c1b921695",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7ed6003-b034-4c31-8d11-23b45cf730fe",
                            Email = "pjmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PJMANAGER@GMAIL.COM",
                            NormalizedUserName = "PJMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDuvofy/t/2NZIbiJ9n9mvM1uHuOB8ImAiLFjbhN/j3TjV4o3SkE8v3usBeLaeXtRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91593a72-cd2d-4902-9e33-07a5a9ef9b38",
                            TwoFactorEnabled = false,
                            UserName = "pjmanager@gmail.com"
                        },
                        new
                        {
                            Id = "007e8fc5-4751-4514-8d48-842fe1478097",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "51266c8c-079d-4eed-abc6-9f6412ef2af4",
                            Email = "phmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PHMANAGER@GMAIL.COM",
                            NormalizedUserName = "PHMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsFxPtWwJrhdHsbWzPv2mlJq6gkqkBLImRbB95k6qCtt0s18sCaIF0evY6O3McY+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e674cdc-01bd-42e1-afc8-4b4e4564be82",
                            TwoFactorEnabled = false,
                            UserName = "phmanager@gmail.com"
                        },
                        new
                        {
                            Id = "19116f65-9e11-4b13-81b0-0b5a2f224fda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b92ecee8-0a51-4970-9ad2-db4bb66e244b",
                            Email = "sdmanager@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SDMANAGER@GMAIL.COM",
                            NormalizedUserName = "SDMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF5jzaGrwmpeB+afU4J3+f0hwmMkB7mRzui/d/qxsPUL3Q53aLr2p2wvSddOBBtgNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7248531d-eaa3-4ddc-86f3-9f303e1a3874",
                            TwoFactorEnabled = false,
                            UserName = "sdmanager@gmail.com"
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BuildingNum")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = "80d9c265-64a3-4520-9b0f-164d5bfc6afa",
                            IsDeleted = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("SelectedAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("SelectedAddressId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "CategoryImages/pizza.jpeg",
                            IsDeleted = false,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "CategoryImages/Burger.jpeg",
                            IsDeleted = false,
                            Name = "Burgers"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "CategoryImages/pasta.jpeg",
                            IsDeleted = false,
                            Name = "Pasta"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "CategoryImages/Sushi.jpeg",
                            IsDeleted = false,
                            Name = "Sushi"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "CategoryImages/shop-37.jpg",
                            IsDeleted = false,
                            Name = "Desserts"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "CategoryImages/Drink Category.jpeg",
                            IsDeleted = false,
                            Name = "Drinks"
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.FavouriteRestaurant", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CustomerId", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FavouriteRestaurants");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("DateColse")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("DateOpen")
                        .HasColumnType("time");

                    b.Property<decimal>("DeliveryFees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RestaurantManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantManagerId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(23, 0, 0),
                            DateOpen = new TimeOnly(9, 0, 0),
                            DeliveryFees = 40m,
                            Description = "A stylish and modern restaurant serving delicious pizza, pasta, and grilled meals in a cozy ambiance.",
                            ImageUrl = "ResturantImages/Tasty bites.PNG",
                            IsDeleted = false,
                            Name = "Tasty Bites",
                            RestaurantManagerId = 1
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(22, 0, 0),
                            DateOpen = new TimeOnly(10, 0, 0),
                            DeliveryFees = 50m,
                            Description = "A popular Egyptian burger chain known for its real beef burgers and bold flavors.",
                            ImageUrl = "ResturantImages/Burger King.jpeg",
                            IsDeleted = false,
                            Name = "Burger King",
                            RestaurantManagerId = 2
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(20, 0, 0),
                            DateOpen = new TimeOnly(8, 0, 0),
                            DeliveryFees = 35m,
                            Description = "Ginger offers authentic Japanese cuisine and fresh sushi in a stylish setting.",
                            ImageUrl = "ResturantImages/Ginger.JPG",
                            IsDeleted = false,
                            Name = "Ginger",
                            RestaurantManagerId = 3
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(23, 30, 0),
                            DateOpen = new TimeOnly(11, 0, 0),
                            DeliveryFees = 25m,
                            Description = "Papa John’s is a popular American pizza chain known for fresh ingredients and garlic sauce.",
                            ImageUrl = "ResturantImages/papaJohn.jpeg",
                            IsDeleted = false,
                            Name = "PaPa John",
                            RestaurantManagerId = 4
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(22, 0, 0),
                            DateOpen = new TimeOnly(10, 0, 0),
                            DeliveryFees = 45m,
                            Description = "A global restaurant known for pan pizzas, pasta, and sides.",
                            ImageUrl = "ResturantImages/PizzaHut.jpeg",
                            IsDeleted = false,
                            Name = "Pizza Hut",
                            RestaurantManagerId = 5
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            DateColse = new TimeOnly(21, 0, 0),
                            DateOpen = new TimeOnly(9, 0, 0),
                            DeliveryFees = 25m,
                            Description = "A cozy spot serving irresistible desserts and sweet treats.",
                            ImageUrl = "ResturantImages/Sweet Delight.PNG",
                            IsDeleted = false,
                            Name = "Sweet Delights",
                            RestaurantManagerId = 6
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.RestaurantCategory", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("RestaurantId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("RestaurantCategories");

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            CategoryId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 1,
                            CategoryId = 3,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 1,
                            CategoryId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 2,
                            CategoryId = 2,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 2,
                            CategoryId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 3,
                            CategoryId = 4,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 3,
                            CategoryId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 4,
                            CategoryId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 4,
                            CategoryId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 5,
                            CategoryId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 5,
                            CategoryId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 5,
                            CategoryId = 6,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 6,
                            CategoryId = 5,
                            IsDeleted = false
                        },
                        new
                        {
                            RestaurantId = 6,
                            CategoryId = 6,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.RestaurantManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("RestaurantManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = "cfcc4d4f-598d-48d7-985c-973ade5c4a85",
                            IsDeleted = false,
                            Name = "Tasty Bites Manager"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = "823d613d-51f5-44d0-af8c-98a5dcf1e070",
                            IsDeleted = false,
                            Name = "Burger King Manager"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = "f7fe0044-a370-4d9f-ba89-e3c5e07dd17f",
                            IsDeleted = false,
                            Name = "Ginger Manager"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = "249116a4-54c9-4928-8de1-8c1c1b921695",
                            IsDeleted = false,
                            Name = "PaPa John Manager"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = "007e8fc5-4751-4514-8d48-842fe1478097",
                            IsDeleted = false,
                            Name = "Pizza Hut Manager"
                        },
                        new
                        {
                            Id = 6,
                            AccountId = "19116f65-9e11-4b13-81b0-0b5a2f224fda",
                            IsDeleted = false,
                            Name = "Sweet Delights Manager"
                        });
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderFoodOnlineSystem.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Address", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Admin", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Cart", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Address", "SelectedAddress")
                        .WithMany()
                        .HasForeignKey("SelectedAddressId");

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");

                    b.Navigation("SelectedAddress");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Customer", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.FavouriteRestaurant", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Customer", "Customer")
                        .WithMany("FavouriteRestaurants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany("FavouriteRestaurants")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.MenuItem", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Order", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.OrderItem", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Cart", "Cart")
                        .WithMany("OrderItems")
                        .HasForeignKey("CartId");

                    b.HasOne("OrderFoodOnlineSystem.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.Navigation("Cart");

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Restaurant", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.RestaurantManager", "RestaurantManager")
                        .WithMany()
                        .HasForeignKey("RestaurantManagerId");

                    b.Navigation("RestaurantManager");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.RestaurantCategory", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Category", "Category")
                        .WithMany("RestaurantCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantCategories")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.RestaurantManager", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Review", b =>
                {
                    b.HasOne("OrderFoodOnlineSystem.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("OrderFoodOnlineSystem.Models.Restaurant", "Restaurant")
                        .WithMany("Reviews")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Cart", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Category", b =>
                {
                    b.Navigation("RestaurantCategories");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("FavouriteRestaurants");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OrderFoodOnlineSystem.Models.Restaurant", b =>
                {
                    b.Navigation("FavouriteRestaurants");

                    b.Navigation("MenuItems");

                    b.Navigation("Orders");

                    b.Navigation("RestaurantCategories");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
